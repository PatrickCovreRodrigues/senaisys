#!/usr/bin/env python3
"""
Script de teste para o Sistema de Gest√£o Docente (SGD) - Aloca√ß√£o de Docentes
"""

import sys
import json
from datetime import datetime
from alocacao_docentes import alocar_docentes, verificar_disponibilidade_docente, obter_alocacoes_existentes

def teste_alocacao_basica():
    """Teste b√°sico do sistema de aloca√ß√£o"""
    print("=== TESTE B√ÅSICO DO SISTEMA DE ALOCA√á√ÉO ===")
    
    # Dados de exemplo de docentes
    docentes_exemplo = [
        {
            'id': '1',
            'mat': 1001,
            'ch': 120.0,  # Tipo 1 (>100h)
            'tipo': 1,
            'saldo': 120.0,
            'rest': [3, 4]  # N√£o dispon√≠vel quinta e sexta
        },
        {
            'id': '2',
            'mat': 1002,
            'ch': 80.0,   # Tipo 2 (50-99h)
            'tipo': 2,
            'saldo': 80.0,
            'rest': [0, 1]  # N√£o dispon√≠vel segunda e ter√ßa
        },
        {
            'id': '3',
            'mat': 1003,
            'ch': 40.0,   # Tipo 3 (<50h)
            'tipo': 3,
            'saldo': 40.0,
            'rest': [2]   # N√£o dispon√≠vel quarta
        },
        {
            'id': '4',
            'mat': 1004,
            'ch': 60.0,   # Tipo 2 (50-99h)
            'tipo': 2,
            'saldo': 60.0,
            'rest': []    # Dispon√≠vel todos os dias
        }
    ]
    
    try:
        # Processa a aloca√ß√£o
        print("Processando aloca√ß√£o...")
        resultado = alocar_docentes(docentes_exemplo)
        
        # Exibe resultados
        print(f"\n‚úÖ Aloca√ß√£o processada com sucesso!")
        print(f"üìä Estat√≠sticas:")
        print(f"   - Total de aloca√ß√µes: {resultado['estatisticas']['total_alocacoes']}")
        print(f"   - Dias letivos: {resultado['estatisticas']['dias_letivos']}")
        print(f"   - Feriados detectados: {resultado['estatisticas']['feriados']}")
        print(f"   - Arquivo CSV gerado: {resultado['arquivo_csv']}")
        print(f"   - Persistido no banco: {resultado['persistido']}")
        
        # Exibe matriz de aloca√ß√£o
        print(f"\nüìÖ MATRIZ DE ALOCA√á√ÉO:")
        dias_semana = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta']
        horarios = ['19:00', '20:00', '21:00', '22:00']
        
        for dia_idx, dia_nome in enumerate(dias_semana):
            print(f"\n{dia_nome}:")
            for horario_idx, horario in enumerate(horarios):
                alocacoes = resultado['matriz_agendamento'][dia_idx][horario_idx]
                if alocacoes:
                    print(f"  {horario}: {len(alocacoes)} aloca√ß√£o(√µes)")
                    for alocacao in alocacoes:
                        print(f"    - Docente {alocacao['docente_id']} em {alocacao['uc_id']}")
                else:
                    print(f"  {horario}: Livre")
        
        # Teste de verifica√ß√£o de disponibilidade
        print(f"\nüîç TESTE DE VERIFICA√á√ÉO DE DISPONIBILIDADE:")
        docente_id = 1
        dia = 0  # Segunda-feira
        horario = 0  # 19:00
        
        disponivel = verificar_disponibilidade_docente(docente_id, dia, horario)
        print(f"Docente {docente_id} dispon√≠vel na Segunda √†s 19:00? {disponivel}")
        
        # Teste de aloca√ß√µes existentes
        print(f"\nüìã ALOCA√á√ïES EXISTENTES:")
        alocacoes_existentes = obter_alocacoes_existentes(dia, horario)
        print(f"Aloca√ß√µes na Segunda √†s 19:00: {len(alocacoes_existentes)}")
        
        for alocacao in alocacoes_existentes:
            print(f"  - Docente {alocacao['docente_id']} em UC {alocacao['uc_id']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        import traceback
        traceback.print_exc()
        return False

def teste_conflitos():
    """Teste espec√≠fico para detec√ß√£o de conflitos"""
    print("\n=== TESTE DE DETEC√á√ÉO DE CONFLITOS ===")
    
    # Simula docentes com poss√≠veis conflitos
    docentes_conflito = [
        {
            'id': '10',
            'mat': 2001,
            'ch': 100.0,
            'tipo': 1,
            'saldo': 100.0,
            'rest': []
        },
        {
            'id': '11',
            'mat': 2002,
            'ch': 90.0,
            'tipo': 2,
            'saldo': 90.0,
            'rest': []
        }
    ]
    
    try:
        # Primeira aloca√ß√£o
        print("Primeira aloca√ß√£o...")
        resultado1 = alocar_docentes(docentes_conflito)
        print(f"‚úÖ Primeira aloca√ß√£o: {resultado1['estatisticas']['total_alocacoes']} aloca√ß√µes")
        
        # Segunda aloca√ß√£o (deve detectar conflitos)
        print("Segunda aloca√ß√£o (teste de conflitos)...")
        resultado2 = alocar_docentes(docentes_conflito)
        print(f"‚úÖ Segunda aloca√ß√£o: {resultado2['estatisticas']['total_alocacoes']} aloca√ß√µes")
        
        # Verifica conflitos
        conflitos_detectados = 0
        for dia in range(5):
            for horario in range(4):
                alocacoes = obter_alocacoes_existentes(dia, horario)
                if len(alocacoes) > 1:
                    conflitos_detectados += 1
                    print(f"‚ö†Ô∏è  Conflito detectado: {len(alocacoes)} aloca√ß√µes no mesmo hor√°rio")
        
        if conflitos_detectados > 0:
            print(f"‚ö†Ô∏è  Total de conflitos detectados: {conflitos_detectados}")
        else:
            print("‚úÖ Nenhum conflito detectado!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de conflitos: {e}")
        return False

def teste_feriados():
    """Teste espec√≠fico para verifica√ß√£o de feriados"""
    print("\n=== TESTE DE FERIADOS ===")
    
    from alocacao_docentes import SGDAlocacao
    
    try:
        # Teste com diferentes meses
        meses_teste = [1, 4, 9, 12]  # Janeiro, Abril, Setembro, Dezembro
        
        for mes in meses_teste:
            sgd = SGDAlocacao(2025, mes)
            feriados = sgd.feriados
            dias_letivos = sgd.dias_letivos
            
            print(f"\nM√™s {mes}/2025:")
            print(f"  Feriados encontrados: {len(feriados)}")
            for feriado in feriados:
                print(f"    - {feriado.strftime('%d/%m/%Y')}")
            print(f"  Dias letivos: {dias_letivos}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de feriados: {e}")
        return False

def exibir_ajuda():
    """Exibe informa√ß√µes de ajuda"""
    print("""
üéØ SISTEMA DE GEST√ÉO DOCENTE (SGD) - TESTE DE ALOCA√á√ÉO

Este script testa o sistema de aloca√ß√£o autom√°tica de docentes.

üìã FUNCIONALIDADES TESTADAS:
  - Aloca√ß√£o autom√°tica baseada em tipos de docentes
  - Verifica√ß√£o de disponibilidade
  - Detec√ß√£o de conflitos de hor√°rios
  - Verifica√ß√£o de feriados nacionais
  - Gera√ß√£o de matriz de agendamento
  - Exporta√ß√£o para CSV
  - Persist√™ncia no banco de dados

üîß REGRAS DE ALOCA√á√ÉO:
  - Tipo 1 (>100h): 2 dias fixos por semana
  - Tipo 2 (50-99h): 1 dia fixo por semana  
  - Tipo 3 (<50h): aloca√ß√£o aleat√≥ria
  - Cada aloca√ß√£o = 3h20min
  - Hor√°rios noturnos: 19:00, 20:00, 21:00, 22:00
  - Dias √∫teis: Segunda a Sexta

üí° USO:
  python test_alocacao.py [opcao]
  
  Op√ß√µes:
    basico     - Teste b√°sico de aloca√ß√£o
    conflitos  - Teste de detec√ß√£o de conflitos
    feriados   - Teste de verifica√ß√£o de feriados
    todos      - Executa todos os testes
    ajuda      - Exibe esta ajuda
""")

def main():
    """Fun√ß√£o principal"""
    if len(sys.argv) < 2:
        opcao = 'basico'
    else:
        opcao = sys.argv[1].lower()
    
    print("üéØ SISTEMA DE GEST√ÉO DOCENTE (SGD) - TESTE DE ALOCA√á√ÉO")
    print("=" * 60)
    
    if opcao == 'ajuda' or opcao == 'help':
        exibir_ajuda()
        return
    
    sucessos = 0
    total = 0
    
    if opcao in ['basico', 'todos']:
        total += 1
        if teste_alocacao_basica():
            sucessos += 1
    
    if opcao in ['conflitos', 'todos']:
        total += 1
        if teste_conflitos():
            sucessos += 1
    
    if opcao in ['feriados', 'todos']:
        total += 1
        if teste_feriados():
            sucessos += 1
    
    if opcao not in ['basico', 'conflitos', 'feriados', 'todos']:
        print(f"‚ùå Op√ß√£o '{opcao}' n√£o reconhecida. Use 'ajuda' para ver as op√ß√µes dispon√≠veis.")
        return
    
    print(f"\n{'='*60}")
    print(f"üìä RESUMO DOS TESTES: {sucessos}/{total} sucessos")
    
    if sucessos == total:
        print("‚úÖ Todos os testes passaram!")
    else:
        print("‚ùå Alguns testes falharam. Verifique os logs acima.")

if __name__ == "__main__":
    main() 