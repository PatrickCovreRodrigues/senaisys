#!/bin/bash

echo "üéØ SISTEMA DE GEST√ÉO DOCENTE (SGD) - SETUP E TESTE"
echo "=================================================="

# Fun√ß√£o para verificar se o comando foi bem-sucedido
check_command() {
    if [ $? -eq 0 ]; then
        echo "‚úÖ $1 conclu√≠do com sucesso"
    else
        echo "‚ùå Erro em $1"
        exit 1
    fi
}

# Navegar para o diret√≥rio backend
cd "$(dirname "$0")"

echo "üìÅ Diret√≥rio atual: $(pwd)"

# Verificar se o Python 3 est√° instalado
echo "üêç Verificando Python..."
python3 --version
check_command "Verifica√ß√£o do Python"

# Ativar ambiente virtual se existir
if [ -d "venv" ]; then
    echo "üîß Ativando ambiente virtual..."
    source venv/bin/activate
    check_command "Ativa√ß√£o do ambiente virtual"
else
    echo "‚ö†Ô∏è  Ambiente virtual n√£o encontrado. Criando..."
    python3 -m venv venv
    check_command "Cria√ß√£o do ambiente virtual"
    
    echo "üîß Ativando ambiente virtual..."
    source venv/bin/activate
    check_command "Ativa√ß√£o do ambiente virtual"
fi

# Instalar depend√™ncias
echo "üì¶ Instalando depend√™ncias..."
pip install -r requirements.txt
check_command "Instala√ß√£o de depend√™ncias"

# Verificar se as depend√™ncias espec√≠ficas foram instaladas
echo "üîç Verificando depend√™ncias espec√≠ficas..."
python3 -c "import holidays; print('‚úÖ holidays instalado')"
python3 -c "import pandas; print('‚úÖ pandas instalado')"
python3 -c "import fastapi; print('‚úÖ fastapi instalado')"
python3 -c "import sqlalchemy; print('‚úÖ sqlalchemy instalado')"

# Criar tabelas do banco de dados
echo "üóÑÔ∏è  Criando tabelas do banco de dados..."
python3 -c "from database import engine, Base; Base.metadata.create_all(bind=engine); print('‚úÖ Tabelas criadas')"
check_command "Cria√ß√£o de tabelas"

# Testar o sistema de aloca√ß√£o
echo "üß™ Testando o sistema de aloca√ß√£o..."
python3 test_alocacao.py basico
check_command "Teste b√°sico de aloca√ß√£o"

# Testar detec√ß√£o de feriados
echo "üéÑ Testando detec√ß√£o de feriados..."
python3 test_alocacao.py feriados
check_command "Teste de feriados"

# Verificar se o servidor pode ser iniciado
echo "üöÄ Testando inicializa√ß√£o do servidor..."
timeout 10s python3 -m uvicorn main:app --host 0.0.0.0 --port 8000 &
SERVER_PID=$!
sleep 5

# Testar se o servidor est√° respondendo
echo "üîó Testando conectividade..."
curl -s http://localhost:8000/health > /dev/null
if [ $? -eq 0 ]; then
    echo "‚úÖ Servidor respondendo corretamente"
else
    echo "‚ö†Ô∏è  Servidor n√£o est√° respondendo (pode ser normal se porta em uso)"
fi

# Parar o servidor de teste
kill $SERVER_PID 2>/dev/null

echo ""
echo "üéâ SETUP CONCLU√çDO COM SUCESSO!"
echo "=================================================="
echo "üìã Para executar o sistema:"
echo "   1. Ative o ambiente virtual: source venv/bin/activate"
echo "   2. Execute o servidor: python3 -m uvicorn main:app --reload --host 0.0.0.0 --port 8000"
echo "   3. Acesse: http://localhost:8000/docs (documenta√ß√£o da API)"
echo ""
echo "üß™ Para testar o sistema de aloca√ß√£o:"
echo "   python3 test_alocacao.py [basico|conflitos|feriados|todos]"
echo ""
echo "üìä Endpoints da API de aloca√ß√£o:"
echo "   POST /api/alocacao/processar - Processa aloca√ß√£o autom√°tica"
echo "   GET  /api/alocacao/matriz-horarios - Obt√©m matriz de hor√°rios"
echo "   GET  /api/alocacao/disponibilidade/{docente_id} - Verifica disponibilidade"
echo "   GET  /api/alocacao/estatisticas - Obt√©m estat√≠sticas"
echo ""
echo "üí° Consulte a documenta√ß√£o em: http://localhost:8000/docs" 